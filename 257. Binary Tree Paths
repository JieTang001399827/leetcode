# 257. Binary Tree Paths
### 方法一：遍历法
```java
class Solution {
    List<String> res=new ArrayList<>();
    public List<String> binaryTreePaths(TreeNode root) {
        if(root==null){
            return res;
        }
        String tmp=String.valueOf(root.val);
        helper(root, tmp);
        
        return res;
        
    }
    private void helper(TreeNode root, String tmp){
        if(root.left==null&&root.right==null){
            res.add(tmp);
            return;
        }
        if(root.left!=null){
            helper(root.left,tmp+"->"+String.valueOf(root.left.val));
        }
        if(root.right!=null){
             helper(root.right,tmp+"->"+String.valueOf(root.right.val));
        }
       
    }
}
```

### 方法二：分治法
***记得处理左右子树为空的情况***
```java
class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> paths=new ArrayList<>();
        
        if(root==null){
            return paths;
        }
        if(root.left==null&&root.right==null){
            paths.add(""+root.val);
            return paths;
        }
        
        List<String> leftPaths = binaryTreePaths(root.left);
        List<String> rightPaths = binaryTreePaths(root.right);
        
        for(String path:leftPaths){
            paths.add(root.val+"->"+path);
        }
        for(String path:rightPaths){
            paths.add(root.val+"->"+path);
        }
        
        return paths;
    }
    
}
```

### 方法三：迭代法
利用到栈的存储